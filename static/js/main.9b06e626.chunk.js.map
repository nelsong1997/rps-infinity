{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","value0","value1","error","calculated","enterPressed","handleInputChange","bind","calculate","reset","handleKeyDown","this","toLowerCase","setState","deleteAtIndex","string","index","slice","length","smallValue0","smallValue1","valueAstart","valueBstart","maxLength","i","charCodeAt","largerLength","indexA","indexB","result","valueA","valueB","toString","e","property","target","name","value","valueArray","split","valueIsGood","char","includes","keyCode","winningWord","losingWord","value0Style","value1Style","border","id","className","style","color","onClick","type","onChange","onKeyDown","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9b06e626.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value0: \"\",\n            value1: \"\",\n            error: \"\",\n            calculated: false,\n            enterPressed: false\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.calculate = this.calculate.bind(this);\n        this.reset = this.reset.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n    }\n\n    calculate() {\n        let error = false\n        if (this.state.value0===\"\" && this.state.value1===\"\") {\n            error = \"both of the inputs are empty!\"\n        } else if (this.state.value0===\"\" || this.state.value1===\"\") {\n            error = \"one of the inputs is empty!\"\n        } else if (this.state.value0.toLowerCase()===this.state.value1.toLowerCase()) {\n            error = \"the inputs are the same!\"\n        }\n\n        if (error) {\n            this.setState({error: error})\n        } else {\n            let smallValue0 = this.state.value0.toLowerCase()\n            let smallValue1 = this.state.value1.toLowerCase()\n\n            //figure out which comes first alphabetically\n            let valueAstart = null\n            let valueBstart = null\n            let maxLength = smallValue0.length\n            if (smallValue1.length < smallValue0.length) maxLength = smallValue1.length\n            for (let i=0; i<maxLength; i++) {\n                if (smallValue0.charCodeAt(i) < smallValue1.charCodeAt(i)) {\n                    valueAstart = smallValue0\n                    valueBstart = smallValue1\n                    break\n                } else if (smallValue0.charCodeAt(i) > smallValue1.charCodeAt(i)) {\n                    valueAstart = smallValue1\n                    valueBstart = smallValue0\n                    break\n                }\n            }\n            if (!valueAstart) {\n                if (smallValue0.length < smallValue1.length) {\n                    valueAstart = smallValue0\n                    valueBstart = smallValue1\n                } else if (smallValue0.length > smallValue1.length) {\n                    valueAstart = smallValue1\n                    valueBstart = smallValue0\n                }\n            }\n\n            function deleteAtIndex(string, index) {\n                return (string.slice(0, index) + string.slice(index + 1, string.length))\n            }\n\n            let largerLength = valueAstart.length\n            if (valueBstart.length > largerLength) largerLength = valueBstart.length\n\n            let indexA = 0\n            let indexB = 0\n            let result = 0\n            let valueA = valueAstart\n            let valueB = valueBstart\n            for (let i=0; i<largerLength; i++) {\n                result = (result + (valueA.charCodeAt(indexA)%2 + valueB.charCodeAt(indexB)%2))%2\n                if (valueA.length > 1) valueA = deleteAtIndex(valueA, indexA)\n                if (valueB.length > 1) valueB = deleteAtIndex(valueB, indexB)\n                indexA = (valueB.charCodeAt(indexB)-96) % valueA.length\n                indexB = (valueA.charCodeAt(indexA)-96) % valueB.length\n            }\n            if (smallValue0!==valueAstart) result = (result + 1)%2 //so results stay the same if you switch values\n            result = result.toString()\n            this.setState({calculated: result, enterPressed: true})\n        }\n    }\n\n    reset() {\n        this.setState(\n            {\n                value0: \"\",\n                value1: \"\",\n                error: \"\",\n                calculated: false,\n                enterPressed: false\n            }\n        )\n    }\n\n    handleInputChange(e) {\n        let property = e.target.name\n        let value = e.target.value\n        let theAlphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        let smallValue = value.toLowerCase()\n\n        let valueArray = smallValue.split(\"\")\n        let valueIsGood = true\n        for (let char of valueArray) {\n            if (!theAlphabet.includes(char)) {\n                valueIsGood = false\n                break\n            }\n        }\n        if (valueIsGood) this.setState({[property]: value, error: \"\"})\n    }\n\n    handleKeyDown(e) {\n        if (e.keyCode!==13 || this.state.enterPressed) return\n        if (this.state.calculated) this.reset()\n        else this.calculate()\n    }\n\n    render() {\n        if (!this.state.calculated) {\n            return (\n                <div id=\"main\">\n                    <h2>Rock, Paper, Scissors, Infinity</h2>\n                    <div id=\"values\">\n                        <input\n                            type=\"text\" onChange={this.handleInputChange} maxLength=\"16\" name=\"value0\"\n                            value={this.state.value0} className=\"value\" onKeyDown={this.handleKeyDown}\n                        />\n                        <label>vs</label>\n                        <input\n                            type=\"text\" onChange={this.handleInputChange} maxLength=\"16\" name=\"value1\"\n                            value={this.state.value1} className=\"value\" onKeyDown={this.handleKeyDown}\n                        />\n                    </div>\n                    <label id=\"error\" style={{color: \"red\"}}><strong>{this.state.error}</strong></label>\n                    <button onClick={this.calculate}>calculate</button>\n                </div>\n            )\n        } else {\n            let value0Style = {}\n            let value1Style = {}\n            let winningWord\n            let losingWord\n            if (this.state.calculated===\"0\") {\n                value0Style = {border: \"2px solid red\"}\n                winningWord = this.state.value0\n                losingWord = this.state.value1\n            } else if (this.state.calculated===\"1\") {\n                value1Style = {border: \"2px solid red\"}\n                winningWord = this.state.value1\n                losingWord = this.state.value0\n            }\n            return (\n                <div id=\"main\">\n                    <h2>Rock, Paper, Scissors, Infinity</h2>\n                    <div id=\"values\">\n                        <div className=\"value\" style={value0Style}>\n                            <label>{this.state.value0}</label>\n                        </div>\n                        <div className=\"value\" style={value1Style}>\n                            <label>{this.state.value1}</label>\n                        </div>\n                    </div>\n                    <label id=\"result\"><strong style={{color: \"red\"}}>\"{winningWord}\"</strong> beats <strong>\"{losingWord}\"</strong>!</label>\n                    <button onClick={this.reset}>try again</button>\n                </div>\n            )\n        }\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}